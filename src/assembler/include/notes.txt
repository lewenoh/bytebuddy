Tokenisation for instructions.
add	x0, x0, #0x1, lsl #12
Note that optional parameters come last and that all parameters are ', ' separated.
Optional parameters can be detected by seeing how many total high level parameters have been supplied.
ldr !

Idea one: Identify what instruction it is then run tokeniser for that specific instruction.
Based on instruction split a certain number of times. Arg for number of splits.
Check for optional. Based on instruction use optional argument tokeniser.

b and b.cond will require lookup symbol table. Do that later.
str,ldr will require a separate tokeniser for memory addressing.


//   .s file read -> Instruction table, Symbol Table
//   For each instruction, classify.
//   Encode each instruction into binary.
//   Write binary to .bin file.
//  char * test_man = "and x0, x0, x0";
//  token_arr tokenised_test;
//  memcpy(tokenised_test, tokenise_instruction(test_man), sizeof(token_arr));
//  for (int i = 0; i < 4; i++) {
//      printf("Element %d: %s\n", i, tokenised_test[i]);
//  }
